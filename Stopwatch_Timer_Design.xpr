// ----------------------------------------
// State Encoding
// ----------------------------------------
localparam Mode1 = 2'b00,
           Mode2 = 2'b01,
           Mode3 = 2'b10,
           Mode4 = 2'b11,

           Initial_State = 3'b000,
           Wait_State = 3'b001,
           Wait2_State = 3'b010,
           CountUp_State = 3'b011,
           Pause_State = 3'b100,
           MaxCount_State = 3'b101;

// ----------------------------------------
// Main Program
// ----------------------------------------
module programmableStopwatch_Timer(
	input clk,
	input [1:0] mode, // mode selection swithces
	input start_stop,
	input reset,
	input [7:0] sw,
	output [3:0] an, // output ports to U2, U3, V4, and W4 in 7-seg display
	output [6:0] sseg,
	output dp        // . between seconds and milliseconds
	);

    wire slow_clk;
	wire sseg_clk;
	wire [6:0] in0, in1, in2, in3;
	reg [2:0] state;
	reg [2:0] next_state;

	// Module instantiation of 7-segment display
	reg [3:0] digit0;
    reg [3:0] digit1;
    reg [3:0] digit2;
    reg [3:0] digit3;

   	// digit 0
	Hexto7segment h1 (.x(digit0), .r(in0));
	// digit 1
	Hexto7segment h2 (.x(digit1), .r(in1));
	// digit 2
	Hexto7segment h3 (.x(digit2), .r(in2));
	// digit 3
	Hexto7segment h4 (.x(digit3), .r(in3));


	// clock divider instantiation
    clkdiv c0 (.clk(clk), .clk_out(slow_clk));
    clkdiv_sseg c1 (.clk(clk), .clk_out(sseg_clk));


	state_machine sm(
    	.clk(sseg_clk),
    	.reset(reset),
    	.in0(in0),
    	.in1(in1),
    	.in2(in2),
    	.in3(in3),
    	.an(an),
    	.sseg(sseg),
    	.dp(dp)
	);

	initial begin
  	state = 3'b000;
	end

    reg [15:0] count = 0;
	always @ (posedge slow_clk) begin
    	case (mode)

    	Mode1: begin
        	case(state)
            	// Initial State
            	Initial_State: begin
            	    begin
                    digit0 <= 0;
                    digit1 <= 0;
                    digit2 <= 0;
                    digit3 <= 0;
                    count <= 0;
                    end

                    if(start_stop)
                        next_state <= Wait_State;
                    else
                        next_state <= Initial_State;
            	end

               	// Wait State to start
            	Wait_State: begin
                    if(!start_stop)
                        next_state <= CountUp_State;
                    else
                        // retain same value in wait state
                        begin
                        digit0 <= digit0;
            	        digit1 <= digit1;
            	        digit2 <= digit2;
            	        digit3 <= digit3;
                        next_state <= Wait_State;
                        end

              	end

                // Count Up State form 0-99
            	CountUp_State: begin
            	   if(reset)
            	       next_state <= Initial_State;

            	   if(start_stop)
            	       next_state <= Wait2_State;


            	   // need a state for Max Count
            	   else if(digit0 == 9 && digit1 == 9 && digit2 == 9 && digit3 == 9)
            	       next_state <= MaxCount_State;

            	   else
            	       // update count
            	        begin
            	        digit0 <= (count%10);
                        digit1 <= ((count/10)%10);
                        digit2 <= ((count/100)%10);
                        digit3 <= ((count/1000)%10);
                        count <= count + 1;
                        next_state <= CountUp_State;
                        end
            	end

            	// Wait State to Pause
            	Wait2_State: begin

            	   if(!start_stop)
                        next_state <= Pause_State;
                   else
                        // retain same value in wait state
                        begin
                        digit0 <= digit0;
            	        digit1 <= digit1;
            	        digit2 <= digit2;
            	        digit3 <= digit3;
                        next_state <= Wait2_State;
                        end
            	end

            	// Pause State
            	Pause_State: begin
            	   if(!start_stop && !reset)
            	       next_state = Pause_State;
            	   if(start_stop)
            	       next_state = Wait_State;
            	   else if(reset)
            	       next_state = Initial_State;
                end

            	// 99.99 reached
            	MaxCount_State: begin
            	   begin
            	   digit0 <= digit0;
            	   digit1 <= digit1;
            	   digit2 <= digit2;
            	   digit3 <= digit3;
            	   end
            	   if(reset)
            	       next_state <= Initial_State;
            	   else
            	       next_state <= MaxCount_State;
                end
       	endcase
       	end
    	// <-------------------------------------------------------------------->
    	// <-------------------------------------------------------------------->
       Mode2: begin
        	case(state)
        	    // Initial State
            	Initial_State: begin
              	    begin
              	    // set to externally loaded values
                	digit0 <= 0;
                	digit1 <= 0;
                	digit2 <= sw[3:0];
                	digit3 <= sw[7:4];
                	count <= ((digit3*1000) + (digit2*100) + 0 + 0);
                    end
              	if(start_stop)
                	next_state <= Wait_State;
              	else
                	next_state <= Initial_State;
                end

               	// Wait State
            	Wait_State: begin
              	if(!start_stop)
              	     next_state <= CountUp_State;
              	else
              	     // retain same value in wait state
                     begin
                     digit0 <= digit0;
                     digit1 <= digit1;
            	     digit2 <= digit2;
                	 digit3 <= digit3;
                	 count <= count;
                     next_state <= Wait_State;
                     end
              	end

              	// Count Up State form externally loaded value - 99.99
            	CountUp_State: begin
            	   if(reset)
            	       next_state <= Initial_State;

            	   else if(start_stop)
            	       next_state <= Wait2_State;

            	   // need a state for Max Count
            	   else if(digit0 == 9 && digit1 == 9 && digit2 == 9 && digit3 == 9)
            	       next_state <= MaxCount_State;

            	   // count is in binary, not decimal, so convert
            	   else
            	       // update count

            	        begin
            	        digit0 <= (count%10);
                        digit1 <= ((count/10)%10);
                        digit2 <= ((count/100)%10);
                        digit3 <= ((count/1000)%10);
                        count <= count + 16'b0000000000000001;
                        next_state <= CountUp_State;
                        end
            	end

              	// Wait State to Pause
            	Wait2_State: begin
            	   if(!start_stop)
                        next_state <= Pause_State;
                   else
                        // retain same value in wait state
                        begin
                        digit0 <= digit0;
            	        digit1 <= digit1;
            	        digit2 <= digit2;
            	        digit3 <= digit3;
                        next_state <= Wait2_State;
                        end
            	end

            	// Pause State
            	Pause_State: begin
            	   if(start_stop)
            	       next_state = Wait_State;
            	   else if(reset)
            	       next_state = Initial_State;
            	   else
            	       begin
                       digit0 <= digit0;
            	       digit1 <= digit1;
            	       digit2 <= digit2;
            	       digit3 <= digit3;
            	       next_state = Pause_State;
            	       end
                end

            	// 99.99 reached
            	MaxCount_State: begin
            	   begin
            	   digit0 <= digit0;
            	   digit1 <= digit1;
            	   digit2 <= digit2;
            	   digit3 <= digit3;
            	   end
            	   if(reset)
            	       next_state <= Initial_State;
            	   else
            	       next_state <= MaxCount_State;
                end
          endcase
    	  end
//    	// <-------------------------------------------------------------------->
//    	// <-------------------------------------------------------------------->
    	Mode3: begin
        	case(state)
            	// Initial State
            	Initial_State: begin
            	    begin
                    digit0 <= 9;
                    digit1 <= 9;
                    digit2 <= 9;
                    digit3 <= 9;
                    count <= 9999;
                    end

                    if(start_stop)
                        next_state <= Wait_State;
                    else
                        next_state <= Initial_State;
            	       end

               	// Wait State to start
            	Wait_State: begin
                    if(!start_stop)
                        next_state <= CountUp_State;
                    else
                        // retain same value in wait state
                        begin
                        digit0 <= digit0;
            	        digit1 <= digit1;
            	        digit2 <= digit2;
            	        digit3 <= digit3;
                        next_state <= Wait_State;
                        end

              	end

                // Count Up State form 0-99
            	CountUp_State: begin
            	   if(reset)
            	       next_state <= Initial_State;

            	   if(start_stop)
            	       next_state <= Wait2_State;


            	   // need a state for Max Count
            	   else if(digit0 == 0 && digit1 == 0 && digit2 == 0 && digit3 == 0)
            	       next_state <= MaxCount_State;

            	   else
            	       // update count
            	        begin
            	        digit0 <= (count%10);
                        digit1 <= ((count/10)%10);
                        digit2 <= ((count/100)%10);
                        digit3 <= ((count/1000)%10);
                        count <= count - 1;
                        next_state <= CountUp_State;
                        end
            	end

            	// Wait State to Pause
            	Wait2_State: begin

            	   if(!start_stop)
                        next_state <= Pause_State;
                   else
                        // retain same value in wait state
                        begin
                        digit0 <= digit0;
            	        digit1 <= digit1;
            	        digit2 <= digit2;
            	        digit3 <= digit3;
                        next_state <= Wait2_State;
                        end
            	end

            	// Pause State
            	Pause_State: begin
            	   if(!start_stop && !reset)
            	       next_state = Pause_State;
            	   if(start_stop)
            	       next_state = Wait_State;
            	   else if(reset)
            	       next_state = Initial_State;
                end

            	// 99.99 reached
            	MaxCount_State: begin
            	   begin
            	   digit0 <= digit0;
            	   digit1 <= digit1;
            	   digit2 <= digit2;
            	   digit3 <= digit3;
            	   end
            	   if(reset)
            	       next_state <= Initial_State;
            	   else
            	       next_state <= MaxCount_State;
                end
       	endcase
       	end
//    	// <-------------------------------------------------------------------->
//    	// <-------------------------------------------------------------------->
    	Mode4: begin
        	case(state)
        	    // Initial State
            	Initial_State: begin
              	    begin
              	    // set to externally loaded values
                	digit0 <= 9;
                	digit1 <= 9;
                	digit2 <= sw[3:0];
                	digit3 <= sw[7:4];
                	count <=((digit3*1000) + (digit2*100) + 90 + 9);
                    end
              	if(start_stop)
                	next_state <= Wait_State;
              	else
                	next_state <= Initial_State;
                end

               	// Wait State
            	Wait_State: begin
              	if(!start_stop)
              	     next_state <= CountUp_State;
              	else
              	     // retain same value in wait state
                     begin
                     digit0 <= digit0;
                     digit1 <= digit1;
            	     digit2 <= digit2;
                	 digit3 <= digit3;
                	 count <= count;
                     next_state <= Wait_State;
                     end
              	end

              	// Count Up State form externally loaded value - 99.99
            	CountUp_State: begin
            	   if(reset)
            	       next_state <= Initial_State;

            	   else if(start_stop)
            	       next_state <= Wait2_State;

            	   // need a state for Max Count
            	   else if(digit0 == 0 && digit1 == 0 && digit2 == 0 && digit3 == 0)
            	       next_state <= MaxCount_State;

            	   // count is in binary, not decimal, so convert
            	   else
            	       // update count

            	        begin
            	        digit0 <= (count%10);
                        digit1 <= ((count/10)%10);
                        digit2 <= ((count/100)%10);
                        digit3 <= ((count/1000)%10);
                        count <= count - 16'b0000000000000001;
                        next_state <= CountUp_State;
                        end
            	end

              	// Wait State to Pause
            	Wait2_State: begin
            	   if(!start_stop)
                        next_state <= Pause_State;
                   else
                        // retain same value in wait state
                        begin
                        digit0 <= digit0;
            	        digit1 <= digit1;
            	        digit2 <= digit2;
            	        digit3 <= digit3;
                        next_state <= Wait2_State;
                        end
            	end

            	// Pause State
            	Pause_State: begin
            	   if(start_stop)
            	       next_state = Wait_State;
            	   else if(reset)
            	       next_state = Initial_State;
            	   else
            	       begin
                       digit0 <= digit0;
            	       digit1 <= digit1;
            	       digit2 <= digit2;
            	       digit3 <= digit3;
            	       next_state = Pause_State;
            	       end
                end

            	// 99.99 reached
            	MaxCount_State: begin
            	   begin
            	   digit0 <= digit0;
            	   digit1 <= digit1;
            	   digit2 <= digit2;
            	   digit3 <= digit3;
            	   end
            	   if(reset)
            	       next_state <= Initial_State;
            	   else
            	       next_state <= MaxCount_State;
                end
          endcase
    	  end
    	endcase
	end

	always @ (posedge slow_clk) begin
    	case (mode)
      	Mode1: begin  //Mode 1
          	state <= next_state; end
        Mode2: begin  //Mode 2
          	state <= next_state; end
      	Mode3: begin  //Mode
      	  	state <= next_state; end
      	Mode4: begin  //Mode 4
          	state <= next_state; end
    	endcase
	end
endmodule

module state_machine(
	input clk,
	input reset,
	input [6:0] in0,
	input [6:0] in1,
	input [6:0] in2,
	input [6:0] in3,
	output reg [3:0] an,
	output reg [6:0] sseg,
	output reg dp
	);

	reg [1:0] state;
	reg [1:0] nextstate;

	// Lab 4
	always @(*) begin
    	case(state)
      	2'b00: begin
        	nextstate = 2'b01;
      	end
      	2'b01: begin
        	nextstate = 2'b10;
      	end
      	2'b10: begin
        	nextstate = 2'b11;
      	end
      	2'b11: begin
        	nextstate = 2'b00;
      	end
    	endcase
	end
	always @(*) begin
    	case(state)
      	2'b00: begin
        	sseg = in0;
        	an = 4'b1110;
        	dp = 1;
      	end
      	2'b01: begin
        	sseg = in1;
        	an = 4'b1101;
        	dp = 1;
      	end
      	2'b10: begin
        	sseg = in2;
        	an = 4'b1011;
        	dp = 0;
      	end
      	2'b11: begin
        	sseg = in3;
        	an = 4'b0111;
        	dp = 1;
      	end
    	endcase
	end
		always @(posedge clk) begin
    	state <= nextstate;
	end


endmodule

module Hexto7segment(
    input [3:0] x,     // number to display
    output reg [6:0] r // 7-seg display
    );

    // Behavioral (Negative Logic)
    always @(*)
    case (x)
         4'b0000 : r = 7'b0000001; // 0
         4'b0001 : r = 7'b1001111; // 1
         4'b0010 : r = 7'b0010010; // 2
         4'b0011 : r = 7'b0000110; // 3
         4'b0100 : r = 7'b1001100; // 4
         4'b0101 : r = 7'b0100100; // 5
         4'b0110 : r = 7'b0100000; // 6
         4'b0111 : r = 7'b0001111; // 7
         4'b1000 : r = 7'b0000000; // 8
         4'b1001 : r = 7'b0001100; // 9
//         // ERROR
//         4'b1010 : r = 7'b0110000; // E
//         4'b1011 : r = 7'b0110000; // E
//         4'b1100 : r = 7'b0110000; // E
//         4'b1101 : r = 7'b0110000; // E
//         4'b1110 : r = 7'b0110000; // E
//         4'b1111 : r = 7'b0110000; // E
    endcase
endmodule

module clkdiv (
    input clk,
    output clk_out
);
    reg [19:0] COUNT;
    assign clk_out = COUNT[19];
    initial COUNT = 0;

    always @(posedge clk)
    begin
       COUNT = COUNT +1;
    end
endmodule


module clkdiv_sseg(
    input clk,
    output clk_out
);

    reg [11:0] COUNT;
    assign clk_out = COUNT[11];

    initial COUNT = 0;
    always @(posedge clk)
        begin
            COUNT = COUNT + 1;
    end

endmodule
